---
- name: Get running container
  community.docker.docker_host_info:
    docker_host: "unix:///run/user/1500/docker.sock"
    containers: yes
    containers_filters:
      name: web-app
  register: containers_info
  tags:
    - cleaning

- name: Stop running container
  community.docker.docker_container:
    docker_host: "unix:///run/user/1500/docker.sock"
    name: "{{ item }}"
    state: stopped
  loop: "{{ containers_info.containers | map(attribute='Id') | list }}"
  when: containers_info.containers | length > 0
  tags:
    - cleaning

- name: Remove Stopped docker containers
  ansible.builtin.shell: |
    docker rm web-app;
  when: containers_info.containers | length > 0
  tags:
    - cleaning

- name: Get old images
  community.docker.docker_host_info:
    docker_host: "unix:///run/user/1500/docker.sock"
    images: true
    images_filters:
      reference: "ghcr.io/lostops-stg5/lostops-app"
  register: images_info
  tags:
    - cleaning

- name: Deleting old images
  community.docker.docker_image_remove:
    docker_host: "unix:///run/user/1500/docker.sock"
    name: "{{ item }}"
    force: true
  loop: "{{ images_info.images | map(attribute='Id') | list }}"
  when: images_info.images | length > 0
  tags:
    - cleaning

- name: Login to docker repository
  community.docker.docker_login:
    docker_host: "unix:///run/user/1500/docker.sock"
    registry_url: "https://ghcr.io/lostops-stg5"
    password: "{{ DOCKERHUB_PASSWORD }}"
    username: "{{ DOCKERHUB_USERNAME }}"
  tags:
    - running

- name: Pulling & running this new image
  community.docker.docker_container:
    docker_host: "unix:///run/user/1500/docker.sock"
    name: "{{ CONTAINER_NAME }}"
    image: "ghcr.io/lostops-stg5/lostops-app:{{ APP_VERSION }}"
    state: started
    restart_policy: "always"
    recreate: true
    pull: true
    env:
      APP_DEBUG: "false"
      APP_ENV: "production"
      DB_CONNECTION: "mysql"
      DB_HOST: "db.lostops.notmuji.com"
      DB_PORT: "3306"
      DB_DATABASE: "lostopsdb"
      DB_USERNAME: "{{ mysql_username | string }}"
      DB_PASSWORD: "{{ mysql_password | string }}"
      APP_KEY: ""
    networks:
      - name: traefik_network
    labels:
      traefik.enable: "true"
      traefik.http.routers.web-app.entrypoints: "websecure"
      traefik.http.routers.web-app.rule: "Host(`app.lostops.notmuji.com`)"
    ports:
      - "80"
  tags:
    - running

- name: Generate .env file
  community.docker.docker_container_exec:
    docker_host: "unix:///run/user/1500/docker.sock"
    container: "{{ CONTAINER_NAME }}"
    argv:
      - /bin/bash
      - "-c"
      - 'rm .env;
        echo "APP_ENV=production" >> .env;
        echo "DB_CONNECTION=mysql" >> .env;
        echo "DB_HOST=db.lostops.notmuji.com" >> .env;
        echo "DB_PORT=3306" >> .env;
        echo "DB_DATABASE=lostopsdb" >> .env;
        echo "DB_USERNAME={{ mysql_username | string }}" >> .env;
        echo "DB_PASSWORD={{ mysql_password | string }}" >> .env;
        echo "APP_KEY=" >> .env;'
  tags:
    - setup

- name: Generate app keys
  community.docker.docker_container_exec:
    docker_host: "unix:///run/user/1500/docker.sock"
    container: "{{ CONTAINER_NAME }}"
    argv:
      - /bin/bash
      - "-c"
      - "php artisan key:generate"
  tags:
    - setup

- name: Migrate database
  community.docker.docker_container_exec:
    docker_host: "unix:///run/user/1500/docker.sock"
    container: "{{ CONTAINER_NAME }}"
    argv:
      - /bin/bash
      - "-c"
      - "php artisan migrate --force"
  tags:
    - setup
